import numpy as np

# import npaes

assert array_to_hex(hex_to_array("2b7e1516", ndim=1)) == '0x2b 0x7e 0x15 0x16'
assert array_to_hex(hex_to_array("e0 c8 d9 85 92 63 b1 b8 7f 63 35 be e8 c0 50 01")) == '0xe0 0xc8 0xd9 0x85 0x92 0x63 0xb1 0xb8 0x7f 0x63 0x35 0xbe 0xe8 0xc0 0x50 0x1'

# Human readable (string copied directly) - these are "backwards" and need swapped
start = hex_to_array("32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34")
key = hex_to_array("2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c")


# Our functions "work" on the column version
rounds = (
    (  # 1
        hex_to_array("19 a0 9a e9 3d f4 c6 f8 e3 e2 8d 48 be 2b 2a 08"),  # Start of round
        hex_to_array("d4 e0 b8 1e 27 bf b4 41 11 98 5d 52 ae f1 e5 30"),  # After SubBytes
        hex_to_array("d4 e0 b8 1e bf b4 41 27 5d 52 11 98 30 ae f1 e5"),  # After ShiftRows
        hex_to_array("04 e0 48 28 66 cb f8 06 81 19 d3 26 e5 9a 7a 4c"),  # After MixColumns
        hex_to_array("a0 88 23 2a fa 54 a3 6c fe 2c 39 76 17 b1 39 05"),  # Round Key Value
    ),
    (  # 2
        hex_to_array("a4 68 6b 02 9c 9f 5b 6a 7f 35 ea 50 f2 2b 43 49"),  # Start of round
        hex_to_array("49 45 7f 77 de db 39 02 d2 96 87 53 89 f1 1a 3b"),  # After SubBytes
        hex_to_array("49 45 7f 77 db 39 02 de 87 53 d2 96 3b 89 f1 1a"),  # After ShiftRows
        hex_to_array("58 1b db 1b 4d 4b e7 6b ca 5a ca b0 f1 ac a8 e5"),  # After MixColumns
        hex_to_array("f2 7a 59 73 c2 96 35 59 95 b9 80 f6 f2 43 7a 7f"),  # Round Key Value
    ),
    (  # 3
        hex_to_array("aa 61 82 68 8f dd d2 32 5f e3 4a 46 03 ef d2 9a"),  # Start of round
        hex_to_array("ac ef 13 45 73 c1 b5 23 cf 11 d6 5a 7b df b5 b8"),  # After SubBytes
        hex_to_array("ac ef 13 45 c1 b5 23 73 d6 5a cf 11 b8 7b df b5"),  # After ShiftRows
        hex_to_array("75 20 53 bb ec 0b c0 25 09 63 cf d0 93 33 7c dc"),  # After MixColumns
        hex_to_array("3d 47 1e 6d 80 16 23 7a 47 fe 7e 88 7d 3e 44 3b"),  # Round Key Value
    ),
    (  # 4
        hex_to_array("48 67 4d d6 6c 1d e3 5f 4e 9d b1 58 ee 0d 38 e7"),  # Start of round
        hex_to_array("52 85 e3 f6 50 a4 11 cf 2f 5e c8 6a 28 d7 07 94"),  # After SubBytes
        hex_to_array("52 85 e3 f6 a4 11 cf 50 c8 6a 2f 5e 94 28 d7 07"),  # After ShiftRows
        hex_to_array("0f 60 6f 5e d6 31 c0 b3 da 38 10 13 a9 bf 6b 01"),  # After MixColumns
        hex_to_array("ef a8 b6 db 44 52 71 0b a5 5b 25 ad 41 7f 3b 00"),  # Round Key Value
    ),
    (  # 5
        hex_to_array("e0 c8 d9 85 92 63 b1 b8 7f 63 35 be e8 c0 50 01"),  # Start of round
        hex_to_array("e1 e8 35 97 4f fb c8 6c d2 fb 96 ae 9b ba 53 7c"),  # After SubBytes
        hex_to_array("e1 e8 35 97 fb c8 6c 4f 96 ae d2 fb 7c 9b ba 53"),  # After ShiftRows
        hex_to_array("25 bd b6 4c d1 11 3a 4c a9 d1 33 c0 ad 68 8e b0"),  # After MixColumns
        hex_to_array("d4 7c ca 11 d1 83 f2 f9 c6 9d b8 15 f8 87 bc bc"),  # Round Key Value
    ),
    (  # 6
        hex_to_array("f1 c1 7c 5d 00 92 c8 b5 6f 4c 8b d5 55 ef 32 0c"),  # Start of round
        hex_to_array("a1 78 10 4c 63 4f e8 d5 a8 29 3d 03 fc df 23 fe"),  # After SubBytes
        hex_to_array("a1 78 10 4c 4f e8 d5 63 3d 03 a8 29 fe fc df 23"),  # After ShiftRows
        hex_to_array("4b 2c 33 37 86 4a 9d d2 8d 89 f4 18 6d 80 e8 d8"),  # After MixColumns
        hex_to_array("6d 11 db ca 88 0b f9 00 a3 3e 86 93 7a fd 41 fd"),  # Round Key Value
    ),
    (  # 7
        hex_to_array("26 3d e8 fd 0e 41 64 d2 2e b7 72 8b 17 7d a9 25"),  # Start of roundz
        hex_to_array("f7 27 9b 54 ab 83 43 b5 31 a9 40 3d f0 ff d3 3f"),  # After SubBytesz
        hex_to_array("f7 27 9b 54 83 43 b5 ab 40 3d 31 a9 3f f0 ff d3"),  # After ShiftRowsz
        hex_to_array("14 46 27 34 15 16 46 2a b5 15 56 d8 bf ec d7 43"),  # After MixColumnsz
        hex_to_array("4e 5f 84 4e 54 5f a6 a6 f7 c9 4f dc 0e f3 b2 4f"),  # Round Key Valuez
    ),
    (  # 8
        hex_to_array("5a 19 a3 7a 41 49 e0 8c 42 dc 19 04 b1 1f 65 0c"),  # Start of round
        hex_to_array("be d4 0a da 83 3b e1 64 2c 86 d4 f2 c8 c0 4d fe"),  # After SubBytes
        hex_to_array("be d4 0a da 3b e1 64 83 d4 f2 2c 86 fe c8 c0 4d"),  # After ShiftRows
        hex_to_array("00 b1 54 fa 51 c8 76 1b 2f 89 6d 99 d1 ff cd ea"),  # After MixColumns
        hex_to_array("ea b5 31 7f d2 8d 2b 8d 73 ba f5 29 21 d2 60 2f"),  # Round Key Value
    ),
    (  # 9
        hex_to_array("ea 04 65 85 83 45 5d 96 5c 33 98 b0 f0 2d ad c5"),  # Start of round
        hex_to_array("87 f2 4d 97 ec 6e 4c 90 4a c3 46 e7 8c d8 95 a6"),  # After SubBytes
        hex_to_array("87 f2 4d 97 6e 4c 90 ec 46 e7 4a c3 a6 8c d8 95"),  # After ShiftRows
        hex_to_array("47 40 a3 4c 37 d4 70 9f 94 e4 3a 42 ed a5 a6 bc"),  # After MixColumns
        hex_to_array("ac 19 28 57 77 fa d1 5c 66 dc 29 00 f3 21 41 6e"),  # Round Key Value
    ),
)

for i, (start_of_round, after_sub_bytes, after_shift_rows, after_mix_columns, roundkey) in enumerate(rounds):
    assert np.array_equal(sub_bytes(start_of_round), after_sub_bytes)
    assert np.array_equal(shift_rows(after_sub_bytes), after_shift_rows)
    assert np.array_equal(mix_columns(after_shift_rows), after_mix_columns)

r10 = (
    hex_to_array("eb 59 8b 1b 40 2e a1 c3 f2 38 13 42 1e 84 e7 d2"),
    hex_to_array("e9 cb 3d af 09 31 32 2e 89 07 7d 2c 72 5f 94 b5"),
    hex_to_array("e9 cb 3d af 31 32 2e 09 7d 2c 89 07 b5 72 5f 94"),
    None,
    hex_to_array("d0 c9 e1 b6 14 ee 3f 63 f9 25 0c 0c a8 89 c8 a6"),
)

end = hex_to_array("39 02 dc 19 25 dc 11 6a 84 09 85 0b 1d fb 97 32")


start = hex_to_array("00112233445566778899aabbccddeeff")
key = hex_to_array("000102030405060708090a0b0c0d0e0f")
tgt = bytes(hex_to_array("69c4e0d86a7b0430d8cdb78070b4c55a").flat)
assert encrypt(start, key) == tgt

start = hex_to_array("00112233445566778899aabbccddeeff")
key = hex_to_array("000102030405060708090a0b0c0d0e0f1011121314151617")
tgt = bytes(hex_to_array("dda97ca4864cdfe06eaf70a0ec0d7191").flat)
assert encrypt(start, key) == tgt

start = hex_to_array("00112233445566778899aabbccddeeff")
key = hex_to_array("000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
tgt = bytes(hex_to_array("8ea2b7ca516745bfeafc49904b496089").flat)
assert encrypt(start, key) == tgt


# ---------------------------------------------------------------------
# From Appendix A - Key Expansion Examples
# A.1 Expansion of a 128-bit Cipher Key

key128 = hex_to_array(
        "2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c", ndim=1
)
w128_true = np.array([
    hex_to_array("2b7e1516", ndim=1),  # 0
    hex_to_array("28aed2a6", ndim=1),  # 1
    hex_to_array("abf71588", ndim=1),  # 2
    hex_to_array("09cf4f3c", ndim=1),  # 3

    hex_to_array("a0fafe17", ndim=1),  # 4
    hex_to_array("88542cb1", ndim=1),  # 5
    hex_to_array("23a33939", ndim=1),  # 6
    hex_to_array("2a6c7605", ndim=1),  # 7
    hex_to_array("f2c295f2", ndim=1),  # 8
    hex_to_array("7a96b943", ndim=1),  # 9
    hex_to_array("5935807a", ndim=1),  # 10
    hex_to_array("7359f67f", ndim=1),  # 11
    hex_to_array("3d80477d", ndim=1),  # 12
    hex_to_array("4716fe3e", ndim=1),  # 13
    hex_to_array("1e237e44", ndim=1),  # 14
    hex_to_array("6d7a883b", ndim=1),  # 15
    hex_to_array("ef44a541", ndim=1),  # 16
    hex_to_array("a8525b7f", ndim=1),  # 17
    hex_to_array("b671253b", ndim=1),  # 18
    hex_to_array("db0bad00", ndim=1),  # 19
    hex_to_array("d4d1c6f8", ndim=1),  # 20
    hex_to_array("7c839d87", ndim=1),  # 21
    hex_to_array("caf2b8bc", ndim=1),  # 22
    hex_to_array("11f915bc", ndim=1),  # 23
    hex_to_array("6d88a37a", ndim=1),  # 24
    hex_to_array("110b3efd", ndim=1),  # 25
    hex_to_array("dbf98641", ndim=1),  # 26
    hex_to_array("ca0093fd", ndim=1),  # 27
    hex_to_array("4e54f70e", ndim=1),  # 28
    hex_to_array("5f5fc9f3", ndim=1),  # 29
    hex_to_array("84a64fb2", ndim=1),  # 30
    hex_to_array("4ea6dc4f", ndim=1),  # 31
    hex_to_array("ead27321", ndim=1),  # 32
    hex_to_array("b58dbad2", ndim=1),  # 33
    hex_to_array("312bf560", ndim=1),  # 34
    hex_to_array("7f8d292f", ndim=1),  # 35
    hex_to_array("ac7766f3", ndim=1),  # 36
    hex_to_array("19fadc21", ndim=1),  # 37
    hex_to_array("28d12941", ndim=1),  # 38
    hex_to_array("575c006e", ndim=1),  # 39
    hex_to_array("d014f9a8", ndim=1),  # 40
    hex_to_array("c9ee2589", ndim=1),  # 41
    hex_to_array("e13f0cc8", ndim=1),  # 42
    hex_to_array("b6630ca6", ndim=1),  # 43
])



key192 = hex_to_array(
    "8e 73 b0 f7 da 0e 64 52 c8 10 f3 2b"
    "80 90 79 e5 62 f8 ea d2 52 2c 6b 7b", ndim=1)
w192_true = np.array([
    hex_to_array("8e73b0f7", ndim=1),  # 0
    hex_to_array("da0e6452", ndim=1),  # 1
    hex_to_array("c810f32b", ndim=1),  # 2
    hex_to_array("809079e5", ndim=1),  # 3
    hex_to_array("62f8ead2", ndim=1),  # 4
    hex_to_array("522c6b7b", ndim=1),  # 5

    hex_to_array("fe0c91f7", ndim=1),  # 6
    hex_to_array("2402f5a5", ndim=1),  # 7
    hex_to_array("ec12068e", ndim=1),  # 8
    hex_to_array("6c827f6b", ndim=1),  # 9
    hex_to_array("0e7a95b9", ndim=1),  # 10
    hex_to_array("5c56fec2", ndim=1),  # 11
    hex_to_array("4db7b4bd", ndim=1),  # 12
    hex_to_array("69b54118", ndim=1),  # 13
    hex_to_array("85a74796", ndim=1),  # 14
    hex_to_array("e92538fd", ndim=1),  # 15
    hex_to_array("e75fad44", ndim=1),  # 16
    hex_to_array("bb095386", ndim=1),  # 17
    hex_to_array("485af057", ndim=1),  # 18
    hex_to_array("21efb14f", ndim=1),  # 19
    hex_to_array("a448f6d9", ndim=1),  # 20
    hex_to_array("4d6dce24", ndim=1),  # 21
    hex_to_array("aa326360", ndim=1),  # 22
    hex_to_array("113b30e6", ndim=1),  # 23
    hex_to_array("a25e7ed5", ndim=1),  # 24
    hex_to_array("83b1cf9a", ndim=1),  # 25
    hex_to_array("27f93943", ndim=1),  # 26
    hex_to_array("6a94f767", ndim=1),  # 27
    hex_to_array("c0a69407", ndim=1),  # 28
    hex_to_array("d19da4e1", ndim=1),  # 29
    hex_to_array("ec1786eb", ndim=1),  # 30
    hex_to_array("6fa64971", ndim=1),  # 31
    hex_to_array("485f7032", ndim=1),  # 32
    hex_to_array("22cb8755", ndim=1),  # 33
    hex_to_array("e26d1352", ndim=1),  # 34
    hex_to_array("33f0b7b3", ndim=1),  # 35
    hex_to_array("40beeb28", ndim=1),  # 36
    hex_to_array("2f18a259", ndim=1),  # 37
    hex_to_array("6747d26b", ndim=1),  # 38
    hex_to_array("458c553e", ndim=1),  # 39
    hex_to_array("a7e1466c", ndim=1),  # 40
    hex_to_array("9411f1df", ndim=1),  # 41
    hex_to_array("821f750a", ndim=1),  # 42
    hex_to_array("ad07d753", ndim=1),  # 43
    hex_to_array("ca400538", ndim=1),  # 44
    hex_to_array("8fcc5006", ndim=1),  # 45
    hex_to_array("282d166a", ndim=1),  # 46
    hex_to_array("bc3ce7b5", ndim=1),  # 47
    hex_to_array("e98ba06f", ndim=1),  # 48
    hex_to_array("448c773c", ndim=1),  # 49
    hex_to_array("8ecc7204", ndim=1),  # 50
    hex_to_array("01002202", ndim=1),  # 51
])


key256 = hex_to_array(
    "60 3d eb 10 15 ca 71 be 2b 73 ae f0 85 7d 77 81"
    "1f 35 2c 07 3b 61 08 d7 2d 98 10 a3 09 14 df f4", ndim=1)
w256_true = np.array([
    hex_to_array("603deb10", ndim=1),
    hex_to_array("15ca71be", ndim=1),
    hex_to_array("2b73aef0", ndim=1),
    hex_to_array("857d7781", ndim=1),
    hex_to_array("1f352c07", ndim=1),
    hex_to_array("3b6108d7", ndim=1),
    hex_to_array("2d9810a3", ndim=1),
    hex_to_array("0914dff4", ndim=1),

    hex_to_array("9ba35411", ndim=1),
    hex_to_array("8e6925af", ndim=1),
    hex_to_array("a51a8b5f", ndim=1),
    hex_to_array("2067fcde", ndim=1),
    hex_to_array("a8b09c1a", ndim=1),
    hex_to_array("93d194cd", ndim=1),
    hex_to_array("be49846e", ndim=1),
    hex_to_array("b75d5b9a", ndim=1),
    hex_to_array("d59aecb8", ndim=1),
    hex_to_array("5bf3c917", ndim=1),
    hex_to_array("fee94248", ndim=1),
    hex_to_array("de8ebe96", ndim=1),
    hex_to_array("b5a9328a", ndim=1),
    hex_to_array("2678a647", ndim=1),
    hex_to_array("98312229", ndim=1),
    hex_to_array("2f6c79b3", ndim=1),
    hex_to_array("812c81ad", ndim=1),
    hex_to_array("dadf48ba", ndim=1),
    hex_to_array("24360af2", ndim=1),
    hex_to_array("fab8b464", ndim=1),
    hex_to_array("98c5bfc9", ndim=1),
    hex_to_array("bebd198e", ndim=1),
    hex_to_array("268c3ba7", ndim=1),
    hex_to_array("09e04214", ndim=1),
    hex_to_array("68007bac", ndim=1),
    hex_to_array("b2df3316", ndim=1),
    hex_to_array("96e939e4", ndim=1),
    hex_to_array("6c518d80", ndim=1),
    hex_to_array("c814e204", ndim=1),
    hex_to_array("76a9fb8a", ndim=1),
    hex_to_array("5025c02d", ndim=1),
    hex_to_array("59c58239", ndim=1),
    hex_to_array("de136967", ndim=1),
    hex_to_array("6ccc5a71", ndim=1),
    hex_to_array("fa256395", ndim=1),
    hex_to_array("9674ee15", ndim=1),
    hex_to_array("5886ca5d", ndim=1),
    hex_to_array("2e2f31d7", ndim=1),
    hex_to_array("7e0af1fa", ndim=1),
    hex_to_array("27cf73c3", ndim=1),
    hex_to_array("749c47ab", ndim=1),
    hex_to_array("18501dda", ndim=1),
    hex_to_array("e2757e4f", ndim=1),
    hex_to_array("7401905a", ndim=1),
    hex_to_array("cafaaae3", ndim=1),
    hex_to_array("e4d59b34", ndim=1),
    hex_to_array("9adf6ace", ndim=1),
    hex_to_array("bd10190d", ndim=1),
    hex_to_array("fe4890d1", ndim=1),
    hex_to_array("e6188d0b", ndim=1),
    hex_to_array("046df344", ndim=1),
    hex_to_array("706c631e", ndim=1),
])

for i, out in (
    (key128, w128_true),
    (key192, w192_true),
    (key256, w256_true),
):
    assert np.array_equal(expand_key(i), out)



# Test of intermediate values from xor with RCON lookup
# See tables A.1, A.2, A.3, respectively for 128/192/256
asw_to_axo_128 = (
    (hex_to_array("8a84eb01", 1), hex_to_array("8b84eb01", 1)),
    (hex_to_array("50386be5", 1), hex_to_array("52386be5", 1)),
    (hex_to_array("cb42d28f", 1), hex_to_array("cf42d28f", 1)),
    (hex_to_array("dac4e23c", 1), hex_to_array("d2c4e23c", 1)),
    (hex_to_array("2b9563b9", 1), hex_to_array("3b9563b9", 1)),
    (hex_to_array("99596582", 1), hex_to_array("b9596582", 1)),
    (hex_to_array("63dc5474", 1), hex_to_array("23dc5474", 1)),
    (hex_to_array("2486842f", 1), hex_to_array("a486842f", 1)),
    (hex_to_array("5da515d2", 1), hex_to_array("46a515d2", 1)),
    (hex_to_array("4a639f5b", 1), hex_to_array("7c639f5b", 1)),
)

for i, (asw, axo) in enumerate(asw_to_axo_128, 1):
    assert np.array_equal(xor(asw, RCON[i]), axo), i

asw_to_axo_192 = (
    (hex_to_array("717f2100", 1), hex_to_array("707f2100", 1)),
    (hex_to_array("b1bb254a", 1), hex_to_array("b3bb254a", 1)),
    (hex_to_array("01ed44ea", 1), hex_to_array("05ed44ea", 1)),
    (hex_to_array("e2048e82", 1), hex_to_array("ea048e82", 1)),
    (hex_to_array("5e49f83e", 1), hex_to_array("4e49f83e", 1)),
    (hex_to_array("8ca96dc3", 1), hex_to_array("aca96dc3", 1)),
    (hex_to_array("82a19e22", 1), hex_to_array("c2a19e22", 1)),
    (hex_to_array("eb94d565", 1), hex_to_array("6b94d565", 1)),
)

for i, (asw, axo) in enumerate(asw_to_axo_192, 1):
    assert np.array_equal(xor(asw, RCON[i]), axo), i

asw_to_axo_256 = (
    (hex_to_array("fa9ebf01", 1), hex_to_array("fb9ebf01", 1)),
    (hex_to_array("4c39b8a9", 1), hex_to_array("4e39b8a9", 1)),
    (hex_to_array("50b66d15", 1), hex_to_array("54b66d15", 1)),
    (hex_to_array("e12cfa01", 1), hex_to_array("e92cfa01", 1)),
    (hex_to_array("a61312cb", 1), hex_to_array("b61312cb", 1)),
    (hex_to_array("8a8f2ecc", 1), hex_to_array("aa8f2ecc", 1)),
    (hex_to_array("cad4d77a", 1), hex_to_array("8ad4d77a", 1)),
)

for i, (asw, axo) in enumerate(asw_to_axo_256, 1):
    assert np.array_equal(xor(asw, RCON[i]), axo), i
